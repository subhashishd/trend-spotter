name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff .
        
    - name: Type check with mypy
      run: |
        mypy --explicit-package-bases *.py --ignore-missing-imports --no-strict-optional
        
    - name: Run tests with pytest
      run: |
        # Set CI environment variable and run only unit tests
        PYTHONPATH=. CI=true pytest -v --tb=short -m "unit" tests/
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check
        
    - name: Run bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
        
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # Note: For actual integration tests with Google ADK and Vertex AI,
    # you would need to set up authentication with service account keys
    # and configure the appropriate secrets in GitHub repository settings
    - name: Run integration tests
      run: |
        echo "Integration tests would run here with proper GCP credentials"
        # pytest tests/integration/ -v
        
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Deploy ADK Agent to Production
      env:
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION || 'us-central1' }}
        SERVICE_NAME: ${{ secrets.SERVICE_NAME || 'trend-spotter-service' }}
        APP_NAME: ${{ secrets.APP_NAME || 'trend-spotter-app' }}
        GOOGLE_GENAI_USE_VERTEXAI: 'true'
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_APP_PASSWORD: ${{ secrets.SENDER_APP_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
        SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
      run: |
        echo "Deploying ADK agent to Google Cloud Run..."
        echo "Environment variables available for deployment:"
        echo "  GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT"
        echo "  GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION"
        echo "  GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI"
        echo "  REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID:0:8}..."
        echo "  REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET:0:8}..."
        echo "  REDDIT_USER_AGENT=$REDDIT_USER_AGENT"
        echo "  SENDER_EMAIL=${SENDER_EMAIL:0:8}..."
        echo "  EMAIL_RECIPIENTS=$EMAIL_RECIPIENTS"
        echo ""
        adk deploy cloud_run \
          --project=$GOOGLE_CLOUD_PROJECT \
          --region=$GOOGLE_CLOUD_LOCATION \
          --service_name=$SERVICE_NAME \
          --app_name=$APP_NAME \
          --with_ui \
          ./trend_spotter
        
    - name: Configure Cloud Run Environment Variables
      env:
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION || 'us-central1' }}
        SERVICE_NAME: ${{ secrets.SERVICE_NAME || 'trend-spotter-service' }}
        GOOGLE_GENAI_USE_VERTEXAI: 'true'
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_APP_PASSWORD: ${{ secrets.SENDER_APP_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
        SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
      run: |
        echo "Configuring environment variables for Cloud Run service..."
        gcloud run services update $SERVICE_NAME \
          --region=$GOOGLE_CLOUD_LOCATION \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT,GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION,GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI,REDDIT_CLIENT_ID=$REDDIT_CLIENT_ID,REDDIT_CLIENT_SECRET=$REDDIT_CLIENT_SECRET,REDDIT_USER_AGENT=$REDDIT_USER_AGENT,SENDER_EMAIL=$SENDER_EMAIL,SENDER_APP_PASSWORD=$SENDER_APP_PASSWORD,EMAIL_RECIPIENTS=$EMAIL_RECIPIENTS,SMTP_SERVER=$SMTP_SERVER,SMTP_PORT=$SMTP_PORT"
        echo "Environment variables configured successfully."
        
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # Add commands to test the deployed agent
        # python test_deployed_agent.py
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ ADK Agent deployed successfully to production"
        else
          echo "❌ ADK Agent deployment failed"
        fi

