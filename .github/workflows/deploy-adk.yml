name: Deploy ADK Agent

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION || 'us-central1' }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME || 'trend-spotter-service' }}
  APP_NAME: ${{ secrets.APP_NAME || 'trend-spotter-app' }}
  AGENT_PATH: './trend_spotter'
  PYTHON_VERSION: '3.9'

jobs:
  deploy-adk:
    name: Deploy ADK Agent
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}
        
    - name: Install ADK and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Configure ADK
      run: |
        # Set up ADK configuration
        export GOOGLE_CLOUD_PROJECT=${{ env.GOOGLE_CLOUD_PROJECT }}
        export GOOGLE_CLOUD_LOCATION=${{ env.GOOGLE_CLOUD_LOCATION }}
        export SERVICE_NAME=${{ env.SERVICE_NAME }}
        export APP_NAME=${{ env.APP_NAME }}
        export AGENT_PATH=${{ env.AGENT_PATH }}
        
    - name: Deploy ADK Agent
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_APP_PASSWORD: ${{ secrets.SENDER_APP_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
        SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
        GOOGLE_GENAI_USE_VERTEXAI: 'true'
      run: |
        echo "Deploying ADK agent to Google Cloud..."
        echo "Environment variables available for deployment:"
        echo "  GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT"
        echo "  GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION"
        echo "  GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI"
        echo "  REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID:0:8}..."
        echo "  REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET:0:8}..."
        echo "  REDDIT_USER_AGENT=$REDDIT_USER_AGENT"
        echo "  SENDER_EMAIL=${SENDER_EMAIL:0:8}..."
        echo "  EMAIL_RECIPIENTS=$EMAIL_RECIPIENTS"
        echo ""
        adk deploy cloud_run \
          --project=$GOOGLE_CLOUD_PROJECT \
          --region=$GOOGLE_CLOUD_LOCATION \
          --service_name=$SERVICE_NAME \
          --app_name=$APP_NAME \
          --with_ui \
          $AGENT_PATH
        
    - name: Configure Cloud Run Environment Variables
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_APP_PASSWORD: ${{ secrets.SENDER_APP_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
        SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
        GOOGLE_GENAI_USE_VERTEXAI: 'true'
      run: |
        echo "Configuring environment variables for Cloud Run service..."
        gcloud run services update $SERVICE_NAME \
          --region=$GOOGLE_CLOUD_LOCATION \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT,GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION,GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI,REDDIT_CLIENT_ID=$REDDIT_CLIENT_ID,REDDIT_CLIENT_SECRET=$REDDIT_CLIENT_SECRET,REDDIT_USER_AGENT=$REDDIT_USER_AGENT,SENDER_EMAIL=$SENDER_EMAIL,SENDER_APP_PASSWORD=$SENDER_APP_PASSWORD,EMAIL_RECIPIENTS=$EMAIL_RECIPIENTS,SMTP_SERVER=$SMTP_SERVER,SMTP_PORT=$SMTP_PORT"
        echo "Environment variables configured successfully."
        
    - name: Configure OAuth2 Environment Variables
      env:
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        GOOGLE_OAUTH2_REDIRECT_BASE_URL: ${{ secrets.GOOGLE_OAUTH2_REDIRECT_BASE_URL }}
      run: |
        echo "üîê Configuring Google OAuth2 authentication..."
        
        # Check if OAuth2 credentials are provided
        if [ -n "$GOOGLE_OAUTH2_CLIENT_ID" ] && [ -n "$GOOGLE_OAUTH2_CLIENT_SECRET" ]; then
          echo "‚úÖ OAuth2 credentials found - enabling authentication"
          
          # Update Cloud Run service with OAuth2 environment variables
          gcloud run services update $SERVICE_NAME \
            --region=$GOOGLE_CLOUD_LOCATION \
            --update-env-vars="GOOGLE_OAUTH2_CLIENT_ID=$GOOGLE_OAUTH2_CLIENT_ID,GOOGLE_OAUTH2_CLIENT_SECRET=$GOOGLE_OAUTH2_CLIENT_SECRET,GOOGLE_OAUTH2_REDIRECT_BASE_URL=$GOOGLE_OAUTH2_REDIRECT_BASE_URL"
          
          echo "üéØ OAuth2 configuration completed!"
          echo "üì± Users will be redirected to Google Sign-In when accessing the app"
        else
          echo "‚ö†Ô∏è  OAuth2 credentials not found in GitHub secrets"
          echo "   To enable authentication, add these secrets:"
          echo "   - GOOGLE_OAUTH2_CLIENT_ID"
          echo "   - GOOGLE_OAUTH2_CLIENT_SECRET"
          echo "   - GOOGLE_OAUTH2_REDIRECT_BASE_URL"
          echo "   See GOOGLE_OAUTH2_SETUP.md for setup instructions"
        fi
        
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # Add commands to test the deployed agent
        # python test_deployed_agent.py
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ ADK Agent deployed successfully to ${{ github.event.inputs.environment || 'staging' }}"
        else
          echo "‚ùå ADK Agent deployment failed"
        fi

